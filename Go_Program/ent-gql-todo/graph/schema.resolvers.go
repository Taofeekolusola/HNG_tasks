package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"errors"
	"strconv"

	"github.com/TaofeekOlusola/ent-gql-todo/auth"
	"github.com/TaofeekOlusola/ent-gql-todo/graph/generated"
	"github.com/TaofeekOlusola/ent-gql-todo/graph/model"
	"golang.org/x/crypto/bcrypt"
	"github.com/TaofeekOlusola/ent-gql-todo/ent/user"
)

// CreateTodo is the resolver for the createTodo mutation.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {

    userID, ok := ctx.Value("id").(int)

    if !ok {
        return nil, errors.New("unauthorized")
    }

    todo, err := r.Client.Todo.
        Create().
        SetText(input.Text).
        SetDone(false).
        SetUserID(userID).
        Save(ctx)

    if err != nil {
        return nil, err
    }

    return &model.Todo{
        ID:        strconv.Itoa(todo.ID),
        Text:      todo.Text,
        Done:      todo.Done,
        CreatedAt: todo.CreatedAt,
    }, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := r.Client.User.
		Create().
		SetName(input.Name).
		SetEmail(input.Email).
		Save(ctx)

	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:    strconv.Itoa(user.ID), // Convert int to string
		Name:  user.Name,
		Email: user.Email,
	}, nil
}

// Register a new user
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, errors.New("failed to hash password")
	}

	createdUser, err := r.Client.User.
		Create().
		SetName(input.Name).
		SetEmail(input.Email).
		SetPassword(string(hashedPassword)).
		Save(ctx)

	if err != nil {
		return nil, errors.New("failed to create user")
	}

	token, err := auth.GenerateToken(createdUser.ID)
	if err != nil {
		return nil, errors.New("failed to generate token")
	}

	// Convert ent.User to model.User (without exposing the password)
	userResponse := &model.User{
		ID:    strconv.Itoa(createdUser.ID),
		Name:  createdUser.Name,
		Email: createdUser.Email,
	}

	return &model.AuthPayload{Token: token, User: userResponse}, nil
}

// Login a user
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	foundUser, err := r.Client.User.
		Query().
		Where(user.Email(input.Email)).
		Only(ctx)

	if err != nil {
		return nil, errors.New("invalid email or password")
	}

	err = bcrypt.CompareHashAndPassword([]byte(foundUser.Password), []byte(input.Password))
	if err != nil {
		return nil, errors.New("invalid email or password")
	}

	token, err := auth.GenerateToken(foundUser.ID)
	if err != nil {
		return nil, errors.New("failed to generate token")
	}

	// Convert ent.User to model.User (without password)
	userResponse := &model.User{
		ID:    strconv.Itoa(foundUser.ID),
		Name:  foundUser.Name,
		Email: foundUser.Email,
	}

	return &model.AuthPayload{Token: token, User: userResponse}, nil
}

// Get Todos for authenticated user
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	userID := ctx.Value("user_id")
	if userID == nil {
		return nil, errors.New("unauthorized")
	}

	todos, err := r.Client.Todo.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert ent.Todo to model.Todo
	var result []*model.Todo
	for _, t := range todos {
		result = append(result, &model.Todo{
			ID:        strconv.Itoa(t.ID),
			Text:      t.Text,
			Done:      t.Done,
			CreatedAt: t.CreatedAt,
		})
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
