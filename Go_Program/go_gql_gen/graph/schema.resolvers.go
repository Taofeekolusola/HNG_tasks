package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"gqlgen_tutorial/graph/model"
)

//CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		ID:   string(len(r.TodosList)+1),
		Text: input.Text,
		Done: false,
		User: &model.User{
			ID:   input.UserID,
			Name: fmt.Sprintf("tao%s", string(len(r.TodosList)+1)), // Fixed fmt.Sprintf usage
		},
	}

	r.TodosList = append(r.TodosList, todo) // Properly appending to the list

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {

	return r.TodosList, nil
	// return []*model.Todo{
	// 	&model.Todo{
	// 		ID: "123",
	// 		Text: "testing",
	// 		Done: false,
	// 		User: &model.User{
	// 			ID: "user1",
	// 			Name: "Tao",
	// 		},
	// 	},
	// },nil

	// panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
